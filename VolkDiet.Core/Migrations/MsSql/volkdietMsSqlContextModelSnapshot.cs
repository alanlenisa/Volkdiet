// <auto-generated />
using System;
using AprosData.ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace VolkDiet.Core.Migrations.MsSql
{
    [DbContext(typeof(volkdietMsSqlContext))]
    partial class volkdietMsSqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("VolkDiet.Core.EF.Aliment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("AliAlcool")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Alcool");

                    b.Property<double?>("AliAmono")
                        .HasColumnType("float")
                        .HasColumnName("ALI_AMono");

                    b.Property<double?>("AliApoly")
                        .HasColumnType("float")
                        .HasColumnName("ALI_APoly");

                    b.Property<double?>("AliAsatur")
                        .HasColumnType("float")
                        .HasColumnName("ALI_ASatur");

                    b.Property<double?>("AliCalcium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Calcium");

                    b.Property<double?>("AliChlorine")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Chlorine");

                    b.Property<double?>("AliCholeterol")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Choleterol");

                    b.Property<double?>("AliCopper")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Copper");

                    b.Property<string>("AliDesc")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("ALI_Desc");

                    b.Property<double?>("AliFibelSol")
                        .HasColumnType("float")
                        .HasColumnName("ALI_FibelSol");

                    b.Property<double?>("AliFiber")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Fiber");

                    b.Property<double?>("AliFructose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Fructose");

                    b.Property<double?>("AliGalactose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Galactose");

                    b.Property<double?>("AliGlucides")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Glucides");

                    b.Property<double?>("AliGlucose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Glucose");

                    b.Property<double?>("AliIron")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Iron");

                    b.Property<double?>("AliIudium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Iudium");

                    b.Property<double?>("AliK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasColumnName("ALI_K")
                        .HasDefaultValueSql("((100))");

                    b.Property<double?>("AliKcal")
                        .HasColumnType("float")
                        .HasColumnName("ALI_KCal");

                    b.Property<double?>("AliLactose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Lactose");

                    b.Property<DateTime?>("AliLastMod")
                        .HasColumnType("datetime")
                        .HasColumnName("ALI_LastMod");

                    b.Property<double?>("AliLipids")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Lipids");

                    b.Property<double?>("AliMagnesium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Magnesium");

                    b.Property<double?>("AliMaltose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Maltose");

                    b.Property<double?>("AliNiacinaB3")
                        .HasColumnType("float")
                        .HasColumnName("ALI_NiacinaB3");

                    b.Property<double?>("AliPhosphorus")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Phosphorus");

                    b.Property<double?>("AliPotassium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Potassium");

                    b.Property<double?>("AliProtein")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Protein");

                    b.Property<double?>("AliRiboflavinaB2")
                        .HasColumnType("float")
                        .HasColumnName("ALI_RiboflavinaB2");

                    b.Property<double?>("AliSelenium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Selenium");

                    b.Property<double?>("AliSodium")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Sodium");

                    b.Property<double?>("AliStarch")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Starch");

                    b.Property<double?>("AliSucrose")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Sucrose");

                    b.Property<double?>("AliTiaminaB1")
                        .HasColumnType("float")
                        .HasColumnName("ALI_TiaminaB1");

                    b.Property<double?>("AliVitAreteq")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitAReteq");

                    b.Property<double?>("AliVitB12")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitB12");

                    b.Property<double?>("AliVitB6")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitB6");

                    b.Property<double?>("AliVitC")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitC");

                    b.Property<double?>("AliVitE")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitE");

                    b.Property<double?>("AliVitEreteq")
                        .HasColumnType("float")
                        .HasColumnName("ALI_VitEReteq");

                    b.Property<double?>("AliWater")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Water");

                    b.Property<double?>("AliZinc")
                        .HasColumnType("float")
                        .HasColumnName("ALI_Zinc");

                    b.Property<int?>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("CAT_ID");

                    b.Property<int?>("LibId")
                        .HasColumnType("int")
                        .HasColumnName("LIB_ID");

                    b.HasKey("Id");

                    b.HasIndex("CatId");

                    b.HasIndex("LibId");

                    b.ToTable("Aliments");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CatDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CAT_Desc");

                    b.Property<int>("LibId")
                        .HasColumnType("int")
                        .HasColumnName("LIB_ID");

                    b.HasKey("Id");

                    b.HasIndex("LibId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Checkup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CupDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CUP_Date");

                    b.Property<double?>("CupFatMass")
                        .HasColumnType("float")
                        .HasColumnName("CUP_FatMass");

                    b.Property<double?>("CupHeigth")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Heigth");

                    b.Property<double?>("CupLeanMass")
                        .HasColumnType("float")
                        .HasColumnName("CUP_LeanMass");

                    b.Property<double?>("CupMis1")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Mis1");

                    b.Property<double?>("CupMis2")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Mis2");

                    b.Property<double?>("CupMis3")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Mis3");

                    b.Property<double?>("CupMis4")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Mis4");

                    b.Property<double?>("CupWeight")
                        .HasColumnType("float")
                        .HasColumnName("CUP_Weight");

                    b.Property<int>("UsrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    b.HasKey("Id");

                    b.HasIndex("UsrId");

                    b.ToTable("Checkups");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DieDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("DIE_Desc");

                    b.Property<DateTime?>("DieLastMod")
                        .HasColumnType("datetime")
                        .HasColumnName("DIE_LastMod");

                    b.Property<string>("DieNote")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("DIE_Note");

                    b.Property<double?>("DiePerCarbs")
                        .HasColumnType("float")
                        .HasColumnName("DIE_PerCarbs");

                    b.Property<double?>("DiePerFats")
                        .HasColumnType("float")
                        .HasColumnName("DIE_PerFats");

                    b.Property<double?>("DiePerProts")
                        .HasColumnType("float")
                        .HasColumnName("DIE_PerProts");

                    b.Property<int?>("DieRequirement")
                        .HasColumnType("int")
                        .HasColumnName("DIE_Requirement");

                    b.Property<int>("TenId")
                        .HasColumnType("int")
                        .HasColumnName("TEN_ID");

                    b.Property<int>("UsrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    b.HasKey("Id");

                    b.HasIndex("TenId");

                    b.HasIndex("UsrId");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietDailyDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AliId")
                        .HasColumnType("int")
                        .HasColumnName("ALI_ID");

                    b.Property<double>("DdeQty")
                        .HasColumnType("float")
                        .HasColumnName("DDE_Qty");

                    b.Property<int>("DmeId")
                        .HasColumnType("int")
                        .HasColumnName("DME_ID");

                    b.HasKey("Id");

                    b.HasIndex("AliId");

                    b.HasIndex("DmeId");

                    b.ToTable("DietDailyDetails");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietDailyMeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DieId")
                        .HasColumnType("int")
                        .HasColumnName("DIE_ID");

                    b.Property<DateTime?>("DmeDate")
                        .HasColumnType("datetime")
                        .HasColumnName("DME_Date");

                    b.Property<int>("DmeDay")
                        .HasColumnType("int")
                        .HasColumnName("DME_Day");

                    b.Property<int>("MeaId")
                        .HasColumnType("int")
                        .HasColumnName("MEA_ID");

                    b.HasKey("Id");

                    b.HasIndex("DieId");

                    b.HasIndex("MeaId");

                    b.ToTable("DietDailyMeals");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TemDesc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TEM_Desc");

                    b.Property<double?>("TemPercCarbs")
                        .HasColumnType("float")
                        .HasColumnName("TEM_PercCarbs");

                    b.Property<double?>("TemPercFats")
                        .HasColumnType("float")
                        .HasColumnName("TEM_PercFats");

                    b.Property<double?>("TemPercProts")
                        .HasColumnType("float")
                        .HasColumnName("TEM_PercProts");

                    b.Property<int>("TenId")
                        .HasColumnType("int")
                        .HasColumnName("TEN_ID");

                    b.HasKey("Id");

                    b.HasIndex("TenId");

                    b.ToTable("DietTemplates");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietTemplateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MeaId")
                        .HasColumnType("int")
                        .HasColumnName("MEA_ID");

                    b.Property<int>("TedDay")
                        .HasColumnType("int")
                        .HasColumnName("TED_Day");

                    b.Property<double>("TedPercKcal")
                        .HasColumnType("float")
                        .HasColumnName("TED_PercKCal");

                    b.Property<int>("TemId")
                        .HasColumnType("int")
                        .HasColumnName("TEM_ID");

                    b.HasKey("Id");

                    b.HasIndex("TemId");

                    b.ToTable("DietTemplateDetails");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.FoodIntollerance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FinDesc")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FIN_Desc");

                    b.Property<int>("FinSeverity")
                        .HasColumnType("int")
                        .HasColumnName("FIN_Severity");

                    b.Property<int>("UsrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    b.HasKey("Id");

                    b.HasIndex("UsrId");

                    b.ToTable("FoodIntollerances");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Lafparameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LafAgeMax")
                        .HasColumnType("int")
                        .HasColumnName("LAF_AgeMax");

                    b.Property<int>("LafAgeMin")
                        .HasColumnType("int")
                        .HasColumnName("LAF_AgeMin");

                    b.Property<string>("LafAlg")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("LAF_Alg");

                    b.Property<int>("LafLvl")
                        .HasColumnType("int")
                        .HasColumnName("LAF_Lvl");

                    b.Property<string>("LafSex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("LAF_Sex");

                    b.Property<double>("LafValue")
                        .HasColumnType("float")
                        .HasColumnName("LAF_Value");

                    b.HasKey("Id");

                    b.ToTable("LAFParameters", (string)null);
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LanCulture")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LAN_Culture");

                    b.Property<int?>("LanDisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("LAN_DisplayOrder");

                    b.Property<string>("LanImageName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("LAN_ImageName");

                    b.Property<string>("LanName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LAN_Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("LibDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LIB_Desc");

                    b.HasKey("Id");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.LocalizedString", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("LanId")
                        .HasColumnType("int")
                        .HasColumnName("LAN_ID");

                    b.Property<string>("ResName")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("RES_Name");

                    b.Property<string>("ResValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RES_Value");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanId", "ResName" }, "IX_LocalizedStrings")
                        .IsUnique()
                        .HasFilter("[LAN_ID] IS NOT NULL AND [RES_Name] IS NOT NULL");

                    b.ToTable("LocalizedStrings");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.LocalizedTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("LanId")
                        .HasColumnType("int")
                        .HasColumnName("LAN_ID");

                    b.Property<string>("LtbProperty")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LTB_Property");

                    b.Property<int?>("LtbRecordId")
                        .HasColumnType("int")
                        .HasColumnName("LTB_RecordID");

                    b.Property<string>("LtbTable")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LTB_Table");

                    b.Property<string>("LtbValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("LTB_Value");

                    b.HasKey("Id");

                    b.HasIndex("LanId");

                    b.ToTable("LocalizedTables");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("MeaDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MEA_Desc");

                    b.Property<int>("TenId")
                        .HasColumnType("int")
                        .HasColumnName("TEN_ID");

                    b.HasKey("Id");

                    b.HasIndex("TenId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RolDesc")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ROL_Desc");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.RolesClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RclName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RCL_Name");

                    b.Property<string>("RclValue")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("RCL_Value");

                    b.Property<int?>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("RolesClaims");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LibId")
                        .HasColumnType("int")
                        .HasColumnName("LIB_ID");

                    b.Property<string>("TenDesc")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("TEN_Desc");

                    b.Property<bool>("TenIsTemplate")
                        .HasColumnType("bit")
                        .HasColumnName("TEN_IsTemplate");

                    b.HasKey("Id");

                    b.HasIndex("LibId");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<int?>("LanId")
                        .HasColumnType("int")
                        .HasColumnName("LAN_ID");

                    b.Property<int>("TenId")
                        .HasColumnType("int")
                        .HasColumnName("TEN_ID");

                    b.Property<DateTime?>("UsrDtReg")
                        .HasColumnType("datetime")
                        .HasColumnName("USR_DtReg");

                    b.Property<string>("UsrEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("USR_Email");

                    b.Property<string>("UsrLogin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USR_Login");

                    b.Property<string>("UsrPwdHash")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("USR_PwdHash");

                    b.Property<string>("UsrStep")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("USR_Step");

                    b.HasKey("Id");

                    b.HasIndex("LanId");

                    b.HasIndex("TenId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.UsersRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("ROL_ID");

                    b.Property<int?>("UsrId")
                        .HasColumnType("int")
                        .HasColumnName("USR_ID");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsrId");

                    b.ToTable("UsersRoles");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Aliment", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Category", "Cat")
                        .WithMany("Aliments")
                        .HasForeignKey("CatId")
                        .HasConstraintName("FK_Aliments_Categories");

                    b.HasOne("VolkDiet.Core.EF.Library", "Lib")
                        .WithMany("Aliments")
                        .HasForeignKey("LibId")
                        .HasConstraintName("FK_Aliments_Libraries");

                    b.Navigation("Cat");

                    b.Navigation("Lib");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Category", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Library", "Lib")
                        .WithMany("Categories")
                        .HasForeignKey("LibId")
                        .IsRequired()
                        .HasConstraintName("FK_Categories_Libraries");

                    b.Navigation("Lib");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Checkup", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.User", "Usr")
                        .WithMany("Checkups")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("FK_Checkups_Users");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Diet", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Tenant", "Ten")
                        .WithMany("Diets")
                        .HasForeignKey("TenId")
                        .IsRequired()
                        .HasConstraintName("FK_Diets_Tenants");

                    b.HasOne("VolkDiet.Core.EF.User", "Usr")
                        .WithMany("Diets")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("FK_Diets_Users");

                    b.Navigation("Ten");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietDailyDetail", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Aliment", "Ali")
                        .WithMany("DietDailyDetails")
                        .HasForeignKey("AliId")
                        .IsRequired()
                        .HasConstraintName("FK_DietDailyDetails_Aliments");

                    b.HasOne("VolkDiet.Core.EF.DietDailyMeal", "Dme")
                        .WithMany("DietDailyDetails")
                        .HasForeignKey("DmeId")
                        .IsRequired()
                        .HasConstraintName("FK_DietDailyDetails_DietDailyMeals");

                    b.Navigation("Ali");

                    b.Navigation("Dme");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietDailyMeal", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Diet", "Die")
                        .WithMany("DietDailyMeals")
                        .HasForeignKey("DieId")
                        .IsRequired()
                        .HasConstraintName("FK_DietDailyMeals_Diets");

                    b.HasOne("VolkDiet.Core.EF.Meal", "Mea")
                        .WithMany("DietDailyMeals")
                        .HasForeignKey("MeaId")
                        .IsRequired()
                        .HasConstraintName("FK_DietDailyMeals_Meals");

                    b.Navigation("Die");

                    b.Navigation("Mea");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietTemplate", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Meal", "Ten")
                        .WithMany("DietTemplates")
                        .HasForeignKey("TenId")
                        .IsRequired()
                        .HasConstraintName("FK_DietTemplates_Meals");

                    b.Navigation("Ten");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietTemplateDetail", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.DietTemplate", "Tem")
                        .WithMany("DietTemplateDetails")
                        .HasForeignKey("TemId")
                        .IsRequired()
                        .HasConstraintName("FK_DietTemplateDetails_DietTemplates");

                    b.Navigation("Tem");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.FoodIntollerance", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.User", "Usr")
                        .WithMany("FoodIntollerances")
                        .HasForeignKey("UsrId")
                        .IsRequired()
                        .HasConstraintName("FK_FoodIntollerances_Users");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.LocalizedString", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Language", "Lan")
                        .WithMany("LocalizedStrings")
                        .HasForeignKey("LanId")
                        .HasConstraintName("FK_LocalizedStrings_Languages");

                    b.Navigation("Lan");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.LocalizedTable", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Language", "Lan")
                        .WithMany("LocalizedTables")
                        .HasForeignKey("LanId")
                        .HasConstraintName("FK_LocalizedTables_Languages");

                    b.Navigation("Lan");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Meal", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Tenant", "Ten")
                        .WithMany("Meals")
                        .HasForeignKey("TenId")
                        .IsRequired()
                        .HasConstraintName("FK_Meals_Tenants1");

                    b.Navigation("Ten");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.RolesClaim", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Role", "Rol")
                        .WithMany("RolesClaims")
                        .HasForeignKey("RolId")
                        .HasConstraintName("FK_RolesClaims_Roles");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Tenant", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Library", "Lib")
                        .WithMany("Tenants")
                        .HasForeignKey("LibId")
                        .HasConstraintName("FK_Tenants_Libraries");

                    b.Navigation("Lib");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.User", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Language", "Lan")
                        .WithMany("Users")
                        .HasForeignKey("LanId")
                        .HasConstraintName("FK_Users_Languages");

                    b.HasOne("VolkDiet.Core.EF.Tenant", "Ten")
                        .WithMany("Users")
                        .HasForeignKey("TenId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Tenants");

                    b.Navigation("Lan");

                    b.Navigation("Ten");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.UsersRole", b =>
                {
                    b.HasOne("VolkDiet.Core.EF.Role", "Rol")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RolId")
                        .HasConstraintName("FK_UsersRoles_Roles");

                    b.HasOne("VolkDiet.Core.EF.User", "Usr")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UsrId")
                        .HasConstraintName("FK_UsersRoles_Users");

                    b.Navigation("Rol");

                    b.Navigation("Usr");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Aliment", b =>
                {
                    b.Navigation("DietDailyDetails");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Category", b =>
                {
                    b.Navigation("Aliments");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Diet", b =>
                {
                    b.Navigation("DietDailyMeals");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietDailyMeal", b =>
                {
                    b.Navigation("DietDailyDetails");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.DietTemplate", b =>
                {
                    b.Navigation("DietTemplateDetails");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Language", b =>
                {
                    b.Navigation("LocalizedStrings");

                    b.Navigation("LocalizedTables");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Library", b =>
                {
                    b.Navigation("Aliments");

                    b.Navigation("Categories");

                    b.Navigation("Tenants");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Meal", b =>
                {
                    b.Navigation("DietDailyMeals");

                    b.Navigation("DietTemplates");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Role", b =>
                {
                    b.Navigation("RolesClaims");

                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.Tenant", b =>
                {
                    b.Navigation("Diets");

                    b.Navigation("Meals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VolkDiet.Core.EF.User", b =>
                {
                    b.Navigation("Checkups");

                    b.Navigation("Diets");

                    b.Navigation("FoodIntollerances");

                    b.Navigation("UsersRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
